name: Deploy VM and Run Docker App

on:
  push:
    branches:
      - master # Trigger the workflow on pushes to the master branch
  workflow_dispatch: # Allows manual triggering of the workflow from the GitHub UI

jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
      AZURE_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
      AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
      VM_USERNAME: "azureuser" # Or your VM username

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Terraform
        uses: hashicorp/terraform-github-actions@v2.2.0 # Explicit Terraform Action Version
        with:
          terraform_command: init
          terraform_version: ">= 1.0"
          # Configure Azure credentials using environment variables
          credentials: |
            {
              "clientId": "${{ env.AZURE_CLIENT_ID }}",
              "clientSecret": "${{ env.AZURE_CLIENT_SECRET }}",
              "subscriptionId": "${{ env.AZURE_SUBSCRIPTION_ID }}",
              "tenantId": "${{ env.AZURE_TENANT_ID }}"
            }
        # Add retries in case of transient errors
        retries: 3

      - name: Format Terraform code
        run: terraform fmt -check

      - name: Plan Terraform
        id: terraform_plan
        run: terraform plan -no-color
        continue-on-error: true

      - name: Apply Terraform
        if: steps.terraform_plan.outcome == 'success'
        run: terraform apply -auto-approve

      - name: Get VM Public IP Address
        id: get_ip
        run: |
          VM_IP=$(terraform output -raw public_ip)
          echo "VM_IP=$VM_IP" >> $GITHUB_ENV
        continue-on-error: true

      - name: Wait for SSH to be ready
        if: steps.get_ip.outcome == 'success'
        uses: fjogeleit/wait-for-remote-host@v1
        with:
          host: ${{ env.VM_IP }}
          port: 22
          timeout: 300
        # Add retries in case of transient errors
        retries: 3

      - name: Install Docker
        if: steps.get_ip.outcome == 'success' && steps.wait-for-remote-host.outcome == 'success'
        run: |
          echo "Connecting to VM at IP: $VM_IP"
          ssh -o StrictHostKeyChecking=no ${{ env.VM_USERNAME }}@"$VM_IP" "bash install-docker.sh"
        continue-on-error: true

      - name: Deploy App
        if: steps.get_ip.outcome == 'success' && steps.wait-for-remote-host.outcome == 'success' && steps.install-docker.outcome == 'success'
        run: |
          echo "Connecting to VM at IP: $VM_IP"
          ssh -o StrictHostKeyChecking=no ${{ env.VM_USERNAME }}@"$VM_IP" "bash deployapp.sh"
